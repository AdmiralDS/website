---
interface Props {
  href: string;
  label: string;
  children: Array<any>;
  active: string;
  opened: boolean;
  indent: number;
}

const { href, label, children, active, opened = true, indent = 0 } = Astro.props;
const id = Math.random().toString(36).slice(2, 11);

let maxHeight;

const slideAnim = {
  old: {
    // name: 'expand',
    // name: 'collapse',
    duration: '1500ms',
    easing: 'ease-in-out',
    // delay: '300ms',
    fillMode: 'none',
  },
  new: {
    // name: 'collapse',
    // name: 'expand',
    duration: '500ms',
    // delay: `-500ms`,
    easing: 'ease-in-out',
    fillMode: 'none',
  },
};
const verticalSlide = {
  // forwards: slideAnim,
  // backwards: slideAnim,
};
---

<div class="menu-item-wrapper" style=`margin-left: ${indent}px` transition:animate>
  <a class:list={['menu-item', { active: active && active === href }]} href={href}>{label}</a>
  {
    children && children.length > 0 && (
      <div class:list={['subitems-wrapper', { opened }]} id={id}>
        <div class="level-separator" />
        {children.map((child) => (
          <Astro.self {...child} {active} indent={indent + 20} />
        ))}
      </div>
    )
  }
</div>

<script lang="ts" define:vars={{ children, id }}>
  const GAP = 20;

  if (children && children.length) {
    const childrenWrapper = document.getElementById(id);

    if (childrenWrapper) {
      const sumChildrenHeight = Array.from(childrenWrapper.children).reduce((value, child) => {
        return value + child.clientHeight;
      }, 0);

      maxHeight = `${sumChildrenHeight + childrenWrapper.children.length * GAP}px`;
    }
  }
</script>

<style define:vars={{ maxHeight }}>
  .subitems-wrapper.opened {
    max-height: var(--maxHeight);
  }
</style>

<style>
  @import './menuItem.css';
</style>
